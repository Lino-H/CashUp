version: '3.8'

services:
  # 订单服务
  order-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cashup-order-service
    ports:
      - "8002:8002"
    environment:
      - APP_NAME=CashUp Order Service
      - APP_VERSION=1.0.0
      - DEBUG=false
      - PORT=8002
      - DATABASE_URL=postgresql+asyncpg://cashup:cashup123@postgres:5432/cashup_orders
      - REDIS_URL=redis://redis:6379/2
      - JWT_SECRET_KEY=your-super-secret-jwt-key-change-in-production
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - TRADING_SERVICE_URL=http://trading-service:8001
      - EXCHANGE_SERVICE_URL=http://exchange-service:8003
      - USER_SERVICE_URL=http://user-service:8000
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - ORDER_TIMEOUT_SECONDS=300
      - MAX_ORDERS_PER_USER=100
      - ORDER_HISTORY_RETENTION_DAYS=90
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cashup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: cashup-order-postgres
    environment:
      - POSTGRES_DB=cashup_orders
      - POSTGRES_USER=cashup
      - POSTGRES_PASSWORD=cashup123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5434:5432"  # 避免与主数据库端口冲突
    networks:
      - cashup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cashup -d cashup_orders"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: cashup-order-redis
    command: redis-server --appendonly yes --requirepass cashup123
    volumes:
      - redis_data:/data
    ports:
      - "6381:6379"  # 避免与主Redis端口冲突
    networks:
      - cashup-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "cashup123", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery Worker (可选)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cashup-order-celery-worker
    command: celery -A app.tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://cashup:cashup123@postgres:5432/cashup_orders
      - REDIS_URL=redis://redis:6379/2
      - CELERY_BROKER_URL=redis://redis:6379/3
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cashup-network
    restart: unless-stopped

  # Celery Beat (可选)
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cashup-order-celery-beat
    command: celery -A app.tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://cashup:cashup123@postgres:5432/cashup_orders
      - REDIS_URL=redis://redis:6379/2
      - CELERY_BROKER_URL=redis://redis:6379/3
      - CELERY_RESULT_BACKEND=redis://redis:6379/3
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cashup-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cashup-network:
    driver: bridge
    name: cashup-network
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cashup-config-service"
version = "1.0.0"
description = "CashUp量化交易系统配置管理服务"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "CashUp Team", email = "dev@cashup.com"}
]
keywords = ["config", "management", "trading", "quantitative", "fastapi"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment"
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "redis[hiredis]>=5.0.1",
    "pyjwt>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "cryptography>=41.0.8",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "jsonschema>=4.20.0",
    "httpx>=0.25.2",
    "structlog>=23.2.0",
    "python-multipart>=0.0.6",
    "python-dateutil>=2.8.2",
    "click>=8.1.7"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.5.0"
]
test = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.2",
    "faker>=20.1.0"
]
perf = [
    "locust>=2.17.0",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14"
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0"
]

[project.urls]
Homepage = "https://github.com/cashup/config-service"
Repository = "https://github.com/cashup/config-service.git"
Documentation = "https://docs.cashup.com/config-service"
"Bug Tracker" = "https://github.com/cashup/config-service/issues"

[project.scripts]
config-service = "main:main"

# Black配置
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

# isort配置
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["app", "main.py"]
skip_glob = ["*/__pycache__/*", "*/migrations/*"]

# MyPy配置
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "sqlalchemy.*",
    "alembic.*",
    "passlib.*",
    "structlog.*",
    "prometheus_client.*"
]
ignore_missing_imports = true

# Pytest配置
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--asyncio-mode=auto"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "database: Tests that require database",
    "redis: Tests that require Redis",
    "auth: Tests that require authentication",
    "api: API tests",
    "service: Service layer tests",
    "model: Model tests",
    "utils: Utility function tests"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:sqlalchemy.*"
]
asyncio_mode = "auto"

# Coverage配置
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/env/*"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod"
]
ignore_errors = true
show_missing = true
skip_covered = false
skip_empty = false
sort = "Cover"

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit配置（安全检查）
[tool.bandit]
exclude_dirs = ["tests", "venv", "env"]
skips = ["B101", "B601"]

# Flake8配置在setup.cfg中定义
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    ".env",
    "env"
]
max-complexity = 10
select = ["B", "C", "E", "F", "W", "T4", "B9"]

# Setuptools配置
[tool.setuptools]
packages = ["app"]

[tool.setuptools.package-data]
app = ["py.typed"]